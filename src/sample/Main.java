package sample;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.util.HashMap;
import java.util.LinkedList;

public class Main extends Application {

    @Override
    public void start(Stage primaryStage) throws Exception{
        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
        primaryStage.setTitle("Signal Flow Gragh");
        primaryStage.setScene(new Scene(root, 800, 500));
        primaryStage.show();
    }


    public static void main(String[] args)
    {
        /*launcher signal flow graph drawer*/
        launch(args);


        /*Kamal's part*/
        HashMap<String,Integer> loops = new HashMap<>();
        LinkedList<int [][]> nodes = new LinkedList<>();
        /**
         int[][] arr = new int[2][8];
         arr[0][0]=0;
         arr[0][1]=1;
         arr[0][2]=0;
         arr[0][3]=0;
         arr[0][4]=0;
         arr[0][5]=0;
         arr[0][6]=0;
         arr[0][7]=0;
         arr[1][0]=0;
         arr[1][1]=0;
         arr[1][2]=0;
         arr[1][3]=0;
         arr[1][4]=0;
         arr[1][5]=0;
         arr[1][6]=0;
         arr[1][7]=0;
         nodes.addLast(arr);
         int[][] arr2 = new int[2][8];
         arr2[0][0]=0;
         arr2[0][1]=0;
         arr2[0][2]=1;
         arr2[0][3]=0;
         arr2[0][4]=0;
         arr2[0][5]=0;
         arr2[0][6]=0;
         arr2[0][7]=0;
         arr2[1][0]=0;
         arr2[1][1]=0;
         arr2[1][2]=0;
         arr2[1][3]=0;
         arr2[1][4]=0;
         arr2[1][5]=0;
         arr2[1][6]=0;
         arr2[1][7]=-4;
         nodes.addLast(arr2);
         int[][] arr3 = new int[2][8];
         arr3[0][0]=0;
         arr3[0][1]=0;
         arr3[0][2]=0;
         arr3[0][3]=2;
         arr3[0][4]=0;
         arr3[0][5]=0;
         arr3[0][6]=0;
         arr3[0][7]=0;
         arr3[1][0]=0;
         arr3[1][1]=0;
         arr3[1][2]=0;
         arr3[1][3]=0;
         arr3[1][4]=0;
         arr3[1][5]=0;
         arr3[1][6]=-3;
         arr3[1][7]=0;
         nodes.addLast(arr3);
         int[][] arr4 = new int[2][8];
         arr4[0][0]=0;
         arr4[0][1]=0;
         arr4[0][2]=0;
         arr4[0][3]=0;
         arr4[0][4]=3;
         arr4[0][5]=0;
         arr4[0][6]=8;
         arr4[0][7]=0;
         arr4[1][0]=0;
         arr4[1][1]=0;
         arr4[1][2]=0;
         arr4[1][3]=0;
         arr4[1][4]=0;
         arr4[1][5]=0;
         arr4[1][6]=0;
         arr4[1][7]=0;
         nodes.addLast(arr4);
         int[][] arr5 = new int[2][8];
         arr5[0][0]=0;
         arr5[0][1]=0;
         arr5[0][2]=0;
         arr5[0][3]=0;
         arr5[0][4]=0;
         arr5[0][5]=4;
         arr5[0][6]=0;
         arr5[0][7]=0;
         arr5[1][0]=0;
         arr5[1][1]=0;
         arr5[1][2]=0;
         arr5[1][3]=0;
         arr5[1][4]=0;
         arr5[1][5]=-1;
         arr5[1][6]=0;
         arr5[1][7]=0;
         nodes.addLast(arr5);
         int[][] arr6 = new int[2][8];
         arr6[0][0]=0;
         arr6[0][1]=0;
         arr6[0][2]=0;
         arr6[0][3]=0;
         arr6[0][4]=0;
         arr6[0][5]=0;
         arr6[0][6]=5;
         arr6[0][7]=7;
         arr6[1][0]=0;
         arr6[1][1]=0;
         arr6[1][2]=0;
         arr6[1][3]=0;
         arr6[1][4]=0;
         arr6[1][5]=0;
         arr6[1][6]=0;
         arr6[1][7]=-2;
         nodes.addLast(arr6);
         int[][] arr7 = new int[2][8];
         arr7[0][0]=0;
         arr7[0][1]=0;
         arr7[0][2]=0;
         arr7[0][3]=0;
         arr7[0][4]=0;
         arr7[0][5]=0;
         arr7[0][6]=0;
         arr7[0][7]=6;
         arr7[1][0]=0;
         arr7[1][1]=0;
         arr7[1][2]=0;
         arr7[1][3]=0;
         arr7[1][4]=0;
         arr7[1][5]=0;
         arr7[1][6]=0;
         arr7[1][7]=0;
         nodes.addLast(arr7);
         */
        int[][] arr = new int[2][8];
        arr[0][0]=0;
        arr[0][1]=1;
        arr[0][2]=0;
        arr[0][3]=0;
        arr[0][4]=0;
        arr[0][5]=0;
        arr[0][6]=0;
        arr[0][7]=0;
        arr[1][0]=0;
        arr[1][1]=0;
        arr[1][2]=0;
        arr[1][3]=0;
        arr[1][4]=0;
        arr[1][5]=0;
        arr[1][6]=0;
        arr[1][7]=0;
        nodes.addLast(arr);
        int[][] arr2 = new int[2][8];
        arr2[0][0]=0;
        arr2[0][1]=0;
        arr2[0][2]=1;
        arr2[0][3]=0;
        arr2[0][4]=0;
        arr2[0][5]=0;
        arr2[0][6]=0;
        arr2[0][7]=0;
        arr2[1][0]=0;
        arr2[1][1]=0;
        arr2[1][2]=0;
        arr2[1][3]=0;
        arr2[1][4]=0;
        arr2[1][5]=0;
        arr2[1][6]=0;
        arr2[1][7]=-1;
        nodes.addLast(arr2);
        int[][] arr3 = new int[2][8];
        arr3[0][0]=0;
        arr3[0][1]=0;
        arr3[0][2]=0;
        arr3[0][3]=1;
        arr3[0][4]=0;
        arr3[0][5]=0;
        arr3[0][6]=0;
        arr3[0][7]=0;
        arr3[1][0]=0;
        arr3[1][1]=0;
        arr3[1][2]=0;
        arr3[1][3]=0;
        arr3[1][4]=0;
        arr3[1][5]=-5;
        arr3[1][6]=0;
        arr3[1][7]=0;
        nodes.addLast(arr3);
        int[][] arr4 = new int[2][8];
        arr4[0][0]=0;
        arr4[0][1]=0;
        arr4[0][2]=0;
        arr4[0][3]=0;
        arr4[0][4]=1;
        arr4[0][5]=0;
        arr4[0][6]=0;
        arr4[0][7]=0;
        arr4[1][0]=0;
        arr4[1][1]=0;
        arr4[1][2]=0;
        arr4[1][3]=0;
        arr4[1][4]=0;
        arr4[1][5]=0;
        arr4[1][6]=0;
        arr4[1][7]=0;
        nodes.addLast(arr4);
        int[][] arr5 = new int[2][8];
        arr5[0][0]=0;
        arr5[0][1]=0;
        arr5[0][2]=0;
        arr5[0][3]=0;
        arr5[0][4]=0;
        arr5[0][5]=2;
        arr5[0][6]=0;
        arr5[0][7]=4;
        arr5[1][0]=0;
        arr5[1][1]=0;
        arr5[1][2]=0;
        arr5[1][3]=0;
        arr5[1][4]=0;
        arr5[1][5]=0;
        arr5[1][6]=0;
        arr5[1][7]=-2;
        nodes.addLast(arr5);
        int[][] arr6 = new int[2][8];
        arr6[0][0]=0;
        arr6[0][1]=0;
        arr6[0][2]=0;
        arr6[0][3]=0;
        arr6[0][4]=0;
        arr6[0][5]=0;
        arr6[0][6]=3;
        arr6[0][7]=0;
        arr6[1][0]=0;
        arr6[1][1]=0;
        arr6[1][2]=0;
        arr6[1][3]=0;
        arr6[1][4]=0;
        arr6[1][5]=0;
        arr6[1][6]=0;
        arr6[1][7]=0;
        nodes.addLast(arr6);
        int[][] arr7 = new int[2][8];
        arr7[0][0]=0;
        arr7[0][1]=0;
        arr7[0][2]=0;
        arr7[0][3]=0;
        arr7[0][4]=0;
        arr7[0][5]=0;
        arr7[0][6]=0;
        arr7[0][7]=1;
        arr7[1][0]=0;
        arr7[1][1]=0;
        arr7[1][2]=0;
        arr7[1][3]=0;
        arr7[1][4]=0;
        arr7[1][5]=0;
        arr7[1][6]=0;
        arr7[1][7]=0;
        nodes.addLast(arr7);
        LoopsFinder find =new LoopsFinder(loops);
        find.findLoops(nodes);
        System.out.println("done");
        System.out.println("# loops = "+loops.size());
    }
}
